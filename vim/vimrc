vim9script


# To create a symbolic link to this vimrc:
# (Windows) : New-Item -ItemType SymbolicLink -Target $HOME\path\to\thisvimrc -Path $HOME\vimfiles\vimrc
# (linux)   : ln -s ~/path/to/this/vimrc ~/.config/vim

# Overview of some environment variables i set in this vimrc:
# $MYVIM_CONFIG_DIR  - the path to the directory where vim expects to find your 'vimrc' file
# $MYVIM_CACHE_DIR   - the path to the directory where vim will store '~', '.un' and '.swp' files
# $MYVIM_FILES       - the path to the root directory where my custom '.vim' files can be found
# $MYVIM_VIMPLUG_DIR - the path to the directory where vimplug will download plugins



# Helper functions
const sep = has('win64') ? '\' : '/'
def GetFilepath(...dirs: list<string>): string
	var rel_path = join(dirs, sep)
	return rel_path
enddef
def GetDirpath(...dirs: list<string>): string
	var rel_path = join(dirs, sep) .. sep
	return rel_path
enddef
def GetFileHelperConfig(configname: string): string
	return GetFilepath(getenv('MYVIM_FILES'), configname .. '.vim')
enddef
def GetFilePluginConfig(pluginname: string): string
	return GetFilepath(getenv('MYVIM_FILES'), 'plugins', pluginname .. '.vim')
enddef
def WriteToStdout(...words: list<any>): void
	writefile(words, '/dev/stdout', 'a')
enddef



# Environment variables
if has('win64')
	setenv('MYVIM_CONFIG_DIR', GetDirpath($HOME, 'vimfiles'))
	setenv('MYVIM_CACHE_DIR', GetDirpath(getenv('MYVIM_CONFIG_DIR'), 'cache'))
	setenv('MYVIM_FILES', GetDirpath($HOME, 'Downloads', 'dotfiles', 'vim'))
else
	setenv('MYVIM_CONFIG_DIR', GetDirpath($HOME, '.config', 'vim'))
	setenv('MYVIM_CACHE_DIR', GetDirpath($HOME, '.cache', 'vim'))
	setenv('MYVIM_FILES', GetDirpath($HOME, 'repos', 'dotfiles', 'vim'))
endif
setenv('MYVIM_BACKUP_DIR', GetDirpath(getenv('MYVIM_CACHE_DIR'), 'backup'))
setenv('MYVIM_SWAP_DIR', GetDirpath(getenv('MYVIM_CACHE_DIR'), 'swap'))
setenv('MYVIM_UNDO_DIR', GetDirpath(getenv('MYVIM_CACHE_DIR'), 'undo'))
setenv('MYVIM_VIMINFO', GetFilepath(getenv('MYVIM_CACHE_DIR'), 'viminfo'))
setenv('MYVIM_VIMPLUG_DIR', GetDirpath(getenv('MYVIM_CONFIG_DIR'), 'vim-plug'))
# override the system MANPAGER, since vim might have trouble using it if it has to (ex: if MANPAGER='nvim')
setenv('MANPAGER', 'vim +MANPAGER --not-a-term -')




# OS-Specific
var vimplug_install_cmd: string
var vimplug_autoload_file = GetFilepath(getenv('MYVIM_CONFIG_DIR'), 'autoload', 'plug.vim')
if has('win64')
	set keywordprg=:help
	set shell=pwsh
	set shellcmdflag=-Command
	vimplug_install_cmd = '!powershell -Command ' .. '\"iwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim | ni ' .. vimplug_autoload_file .. ' -Force \"'
else
	set keywordprg=:Man
	set shell=/bin/bash
	set shellcmdflag=-c
	set rtp-=$VIM/vimfiles
	set rtp-=$VIM/vimfiles/after
	set packpath-=$VIM/vimfiles
	set packpath-=$VIM/vimfiles/after
	runtime ftplugin/man.vim
	vimplug_install_cmd = '!curl -fLo ' .. vimplug_autoload_file .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif
if empty(glob(vimplug_autoload_file))
	silent execute vimplug_install_cmd 
	# OBS1: git must be installed in order for the following autocommand to work!
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
for folder in [$MYVIM_BACKUP_DIR, $MYVIM_SWAP_DIR, $MYVIM_UNDO_DIR]
	if empty(glob(folder))
		mkdir(folder, 'p')
	endif
endfor




# Myconfig
import GetFileHelperConfig('options')
import GetFileHelperConfig('colorschemes')
import GetFilePluginConfig('vimplug')
import GetFilePluginConfig('asyncomplete')
import GetFilePluginConfig('nerdtree')
import GetFilePluginConfig('ale')
#import GetFilePluginConfig('ollama')
import GetFilePluginConfig('vimlsp')
import GetFilePluginConfig('vsnip')
import GetFilePluginConfig('airline')
#vimplug.MinimalSetup($MYVIM_VIMPLUG_DIR)
#vimplug.NormalSetup($MYVIM_VIMPLUG_DIR)
vimplug.FullSetup($MYVIM_VIMPLUG_DIR)
colorschemes.SetCS('onedark', 'dracula', 'sorbet', 'evening', 'wildcharm')




# Mappings
tnoremap <C-D> <C-W><C-C>
nnoremap <Leader>b <Cmd>Buffers<CR>
nnoremap <Leader>c <ScriptCmd>colorschemes.Rotate(-1)<CR>
nnoremap <Leader>v <ScriptCmd>colorschemes.Rotate(+1)<CR>
nnoremap <Leader>e <Cmd>NERDTreeToggle<CR>
nnoremap <Leader>f <Cmd>Files<CR>
nnoremap <Leader>p <Cmd>edit $MYVIM_FILES<CR>
nnoremap <Leader>r <Cmd>source $MYVIMRC<CR>
nnoremap <Leader>s <Cmd>Rg<CR>
nnoremap <Leader>o <Cmd>Ollama toggle<CR>
imap <expr> <C-j>       vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
imap <expr> <C-l>       vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>       vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
inoremap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
snoremap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
inoremap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
snoremap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'



autocmd BufEnter *.c {
  set commentstring=//\ %s
}



# vim: set ft=vim :
