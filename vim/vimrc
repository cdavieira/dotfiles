vim9script
# :help options.txt
# :help $HOME
# edit dotfiles/sometimes/viml/language/3.vim: line23 is wrong
# edit dotfiles/sometimes/viml/language/3.vim: explain that 'XX&vim' can be used to restore any variable's default (read :help options.txt)
# add dotfiles/sometimes/viml/language/3.vim: explain that variables like 'v:null' are vim special variables!
# add dotfiles/sometimes/viml/language/3.vim: var $HOME = 'yolo:burguer'
# :help variables, search for $VAR
# echo environ()
# use $USERPROFILE for windows
# maybe create two sections for variables: one for variables which demands being modified manually and another one for variables that aren't going to change that much across different operating systems and users
# https://learnxinyminutes.com/docs/vimscript/
# maybe add a way of checking if a plugin is installed in order to define a
# mapping




#############################################################
###################### VARIABLES ############################
#############################################################



# OPERATING SYSTEM/USER DEPENDENT VARIABLES
# easily manage where the vim folder should be
var vim_config_dir = '~/.config/vim/'
var vim_cache_dir = '~/.cache/vim/'
var vimplug_autoload_dir = vim_config_dir .. 'autoload/plug.vim'
var vimplug_dir = vim_config_dir .. 'vim-plug'

# create additional folders used to store '~', ''.un' and '.swp' files
for folder in ['backup', 'swap', 'undo']
	var folderpath = vim_cache_dir .. folder
	if empty(glob(folderpath))
		mkdir(expand(folderpath), 'p')
	endif
endfor

# disable loading plugins from folders intended for windows
set rtp-=$VIM/vimfiles
set rtp-=$VIM/vimfiles/after
set packpath-=$VIM/vimfiles
set packpath-=$VIM/vimfiles/after

# load filetype plugin 'man.vim' (shipped with vim)
runtime ftplugin/man.vim

# folder to store '~' files
set backupdir=~/.cache/vim/backup/

# folder to store '.swp' files
set directory=~/.cache/vim/swap/

# folder to store '.un' files
set undodir=~/.cache/vim/undo/

# folder to store 'viminfo' file
# viminfo saves session information upon quit
set viminfofile=~/.cache/vim/viminfo

# choose the desired command to use in conjunction with 'K'
#set keywordprg=:help
set keywordprg=:Man



# OPERATING SYSTEM/USER INDEPENDENT VARIABLES
# enable filetype recognition, plugins for filetypes and indent files
filetype plugin indent on

# load package 'editorconfig' (shipped with vim)
packadd editorconfig

# turn on syntax highlighting for different filetypes
syntax on

# 'background' and 'colorscheme' operate together to set vim's visuals
set background=dark
# wildcharm, evening, desert, habamax, sorbet, zaibatsu
colorscheme wildcharm

# viminfo configuration
# \" ('"' escaped): max. number of lines saved for each register
# ': max. number of previously edited files for which the marks are remembered
set viminfo='20,\"50

# set character encoding used inside vim
set encoding=UTF-8

# list of character encodings to consider when editing existing files
set fileencodings=utf-8,default

# disable text wrapping when text doesn't fit in the window width
set nowrap

# .editorconfig fallbacks
set shiftwidth=2
set tabstop=2
set textwidth=78
set numberwidth=2

# allow automatically erasing all whitespaces associated with autoindents,
# line breaks and the start of insert when pressing 'Ctrl-W'/'Ctrl-U'
set backspace=indent,eol,start

# show line numbers relative to the current one
set relativenumber

# jump to matching patterns while typing after pressing '/', '?' in normal mode
set incsearch

# show the line and column number of the cursor position
set ruler

# show unfinished commands in the bottom right
set showcmd

# set english/german as the default languages for help files
# german is not implemented yet for vim
set helplang=en,de

# automatically read buffers that were modified outside vim (by other text editors)
set autoread

# timeout and ttimeout on
# toss invoking unfinished commands related to mappings and keycodes
set timeout
set ttimeout

# because timeout and ttimeout are on, set a timeout value for mappings
# in ms
# set timeoutlen=3000

# because timeout and ttimeout are on, set a different timeout value for keycodes
# in ms
set ttimeoutlen=100

# enhance commandline completion operation, by enabling 'wildchar' to invoke
# completion
set wildmenu





#############################################################
#################### PLUGIN VARIABLES #######################
#############################################################
# changes the way cmdline-completion is done
# Display the completion matches using the popup menu in the same style as the
# |ins-completion-menu|
g:wildoptions = "pum"

# use <Space> as the map leader
g:mapleader = " "

# use ',' as the local leader
g:maplocalleader = ","

# open manpages in a new tab
g:ft_man_open_mode = 'tab'

# disallow NERDTree extension from creating unwanted mappings
g:NERDCreateDefaultMappings = 0

g:lsp_format_sync_timeout = 1000

g:lsp_preview_doubletap = 0

g:lsp_preview_autoclose = 1

g:lsp_diagnostics_enabled = 1

g:lsp_preview_keep_focus = 1

#g:lsp_experimental_workspace_folders = 1

# create a log file to inspect lsp action
g:lsp_log_file = expand(vim_config_dir .. 'vim-lsp.log')

# create a log file to inspect async action
#g:asyncomplete_log_file = expand(vim_config_dir .. 'asyncomplete.log')





#############################################################
###################### PLUGIN MANAGER #######################
#############################################################
# in case vim plug isn't already installed, install it
# taken from https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob(vimplug_autoload_dir))
  execute '!curl -fLo ' .. vimplug_autoload_dir .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

g:plug#begin(vimplug_dir)

# https://github.com/preservim/nerdtree
Plug 'preservim/nerdtree'

# https://github.com/ryanoasis/vim-devicons
Plug 'ryanoasis/vim-devicons'

# https://github.com/tpope/vim-surround
# Plug 'tpope/vim-surround'

# https://github.com/tpope/vim-endwise
Plug 'tpope/vim-endwise'

# https://github.com/junegunn/fzf.vim
# 'do' is used for plugins that require extra steps after installation/update
# fzf (yes, the cmdline binary) get's installed first and then its vim plugin
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

# https://github.com/prabirshrestha/vim-lsp
Plug 'prabirshrestha/vim-lsp'

# https://github.com/prabirshrestha/asyncomplete.vim
Plug 'prabirshrestha/asyncomplete.vim'

# https://github.com/prabirshrestha/asyncomplete-lsp.vim
Plug 'prabirshrestha/asyncomplete-lsp.vim'

# https://github.com/preservim/nerdcommenter
Plug 'preservim/nerdcommenter'

# https://github.com/itchyny/lightline.vim
# Plug 'itchyny/lightline.vim'

# https://github.com/vim-airline/vim-airline
Plug 'vim-airline/vim-airline'

# https://github.com/vim-airline/vim-airline-themes#vim-airline-themes--
Plug 'vim-airline/vim-airline-themes'

# https://github.com/morhetz/gruvbox?tab=readme-ov-file
# Plug 'morhetz/gruvbox'
# autocmd vimenter * ++nested colorscheme gruvbox

# https://github.com/joshdick/onedark.vim
# Plug 'joshdick/onedark.vim'
# colorscheme onedark

# https://github.com/mbbill/undotree
# Plug 'mbbill/undotree'

# https://github.com/tpope/vim-fugitive
# Plug 'tpope/vim-fugitive'

# https://github.com/preservim/tagbar?tab=readme-ov-file
# Plug 'preservim/tagbar'

# https://github.com/preservim/vim-markdown
# Plug 'godlygeek/tabular'
# Plug 'preservim/vim-markdown'

# https://github.com/rhysd/vim-healthcheck
Plug 'rhysd/vim-healthcheck'

# " Call plug#end to update &runtimepath and initialize the plugin system.
# " - It automatically executes `filetype plugin indent on` and `syntax enable`
g:plug#end()





#############################################################
######################### MAPPINGS ##########################
#############################################################
nnoremap <Leader>b <Cmd>Buffers<CR>
nnoremap <Leader>c <Cmd>edit $MYVIMRC<CR>
nnoremap <Leader>e <Cmd>NERDTreeToggle<CR>
nnoremap <Leader>f <Cmd>Files<CR>
nnoremap <Leader>r <Cmd>source $MYVIMRC<CR>
nnoremap <Leader>s <Cmd>Rg<CR>
noremap \ :term ++kill="kill"<CR>
tnoremap \ <CR><C-D>
inoremap <expr> <C-q> pumvisible() ? asyncomplete#cancel_popup() : "\<C-q>"





#############################################################
######################## LSP CONFIG #########################
#############################################################
# Steps to configure a new LSP:
#
# Step 1: create a dictionary based on one of the ones found below to inform
# how the LSP server should be initialized
#
# Step 2: create an autocmd to register the language server and set it upon
# opening a file of a certain programming language
#
# Step 3: create one or more autocmds to setup mappings and options upon
# opening files

########################
######## STEP 1 ########
########################
# this dictionary also accepts the keys:
# 'root_uri', 'capabilities', 'initialization_options'
# you can check this by reading '~/.config/vim/autoload/lsp.vim#s:ensure_init'
var c_lspinfo = {
	'name': 'clangd',
	'cmd': ['clangd', '--background-index'],
	'allowlist': ['c'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var lua_lspinfo = {
	'name': 'lua-language-server',
	'cmd': ['lua-language-server', '--stdio'],
	'allowlist': ['lua'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var python_lspinfo = {
	'name': 'pylsp',
	'cmd': ['pylsp'],
	'allowlist': ['python'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var rust_lsp_info = {
	'name': 'rust-analyzer',
	#'cmd': ['rust-analyzer', '--log-file', './rust.log'],
	'cmd': ['rust-analyzer'],
	'allowlist': ['rust'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var vim_lsp_info = {
	'name': 'vim-language-server',
	'cmd': ['vim-language-server', '--stdio'],
	'allowlist': ['vim'],
	'initialization_options': {
		'vimruntime': $VIMRUNTIME,
		'runtimepath': &rtp
	},
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}

########################
######## STEP 2 ########
########################
if executable('clangd')
	au User lsp_setup lsp#register_server(c_lspinfo)
endif
if executable('lua-language-server')
	au User lsp_setup lsp#register_server(lua_lspinfo)
endif
if executable('pylsp')
	au User lsp_setup lsp#register_server(python_lspinfo)
endif
if executable('rust-analyzer')
	au User lsp_setup lsp#register_server(rust_lsp_info)
endif
if executable('vim-language-server')
	au User lsp_setup lsp#register_server(vim_lsp_info)
endif

########################
######## STEP 3 ########
########################
def On_lsp_buffer_enabled(): void
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

	# peek- infixable
  nnoremap <buffer> <leader>a <plug>(lsp-declaration)
	nnoremap <buffer> <leader>d <plug>(lsp-definition)
  nnoremap <buffer> <leader>g <plug>(lsp-implementation)
	nnoremap <buffer> <leader>t <plug>(lsp-type-definition)
  nnoremap <buffer> <leader>h <plug>(lsp-type-hierarchy)

	# -preview appendable
  nnoremap <buffer> <leader>k <plug>(lsp-hover)

	# nothing
  nnoremap <buffer> <leader>m <plug>(lsp-document-symbol)
  nnoremap <buffer> <leader>i <plug>(lsp-document-diagnostics)
  nnoremap <buffer> <leader>w <plug>(lsp-preview-focus)
  nnoremap <buffer> <leader>l <plug>(lsp-preview-close)
  nnoremap <buffer> <leader>j <plug>(lsp-rename)

	# retired
  # nnoremap <buffer> <leader>z <plug>(lsp-code-action)
  # nnoremap <buffer> <leader>y <plug>(lsp-references)
  # nnoremap <buffer> <leader>x <plug>(lsp-code-lens)
  # nnoremap <buffer> <leader>w <plug>(lsp-next-diagnostic)
  # nnoremap <buffer> <leader>v <plug>(lsp-next-error)
  # nnoremap <buffer> <leader>u <plug>(lsp-next-warning)
  # nnoremap <buffer> <leader>n <plug>(lsp-status)

	autocmd! BufWritePre *.rs execute('LspDocumentFormatSync')
enddef

augroup lsp_install
	au!
	autocmd User lsp_buffer_enabled call On_lsp_buffer_enabled()
augroup END

# vim: set ft=vim :
