vim9script
syntax on
set background=dark
colorscheme wildcharm
set nowrap
set shiftwidth=2
set tabstop=2
set relativenumber
set viminfo='20,\"50
set timeout
set ttimeout
set ttimeoutlen=100
set wildmenu
g:wildoptions = "pum"

call plug#begin('~/.vim/vim-plug')
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()

var c_lspinfo = {
	'name': 'clangd',
	'cmd': ['clangd', '--background-index'],
	'allowlist': ['c'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var lua_lspinfo = {
	'name': 'lua-language-server',
	'cmd': ['lua-language-server', '--stdio'],
	'allowlist': ['lua'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var python_lspinfo = {
	'name': 'pylsp',
	'cmd': ['pylsp'],
	'allowlist': ['python'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var rust_lsp_info = {
	'name': 'rust-analyzer',
	'cmd': ['rust-analyzer', '--log-file', './rust.log'],
	'allowlist': ['rust'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var vim_lsp_info = {
	'name': 'vim-language-server',
	'cmd': ['vim-language-server', '--stdio'],
	'allowlist': ['vim'],
	'initialization_options': {
		'vimruntime': $VIMRUNTIME,
		'runtimepath': &rtp
	},
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}

if executable('clangd')
	au User lsp_setup lsp#register_server(c_lspinfo)
endif
if executable('lua-language-server')
	au User lsp_setup lsp#register_server(lua_lspinfo)
endif
if executable('pylsp')
	au User lsp_setup lsp#register_server(python_lspinfo)
endif
if executable('rust-analyzer')
	au User lsp_setup lsp#register_server(rust_lsp_info)
endif
if executable('vim-language-server')
	au User lsp_setup lsp#register_server(vim_lsp_info)
endif

def On_lsp_buffer_enabled()
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

  nnoremap <buffer> <leader>d <plug>(lsp-declaration)
	nnoremap <buffer> <leader>g <plug>(lsp-definition)
  nnoremap <buffer> <leader>h <plug>(lsp-hover)
  nnoremap <buffer> <leader>i <plug>(lsp-document-diagnostics)
  nnoremap <buffer> <leader>l <plug>(lsp-status)
  nnoremap <buffer> <leader>r <plug>(lsp-rename)
	nnoremap <buffer> <leader>t <plug>(lsp-type-definition)

	g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs execute('LspDocumentFormatSync')
enddef

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled On_lsp_buffer_enabled()
augroup END
