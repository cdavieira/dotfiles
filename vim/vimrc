vim9script
set rtp-=$VIM/vimfiles
set rtp-=$VIM/vimfiles/after
set packpath-=$VIM/vimfiles
set packpath-=$VIM/vimfiles/after
filetype plugin indent on
packadd editorconfig
syntax on
set background=dark
# wildcharm, evening, desert, habamax, sorbet, zaibatsu
colorscheme wildcharm
set backupdir=~/.cache/vim/backup/
set directory=~/.cache/vim/swap/
set undodir=~/.cache/vim/undo/
set viminfofile=~/.cache/vim/viminfo
set encoding=UTF-8
set fileencodings=utf-8,default
set nowrap
set shiftwidth=2
set tabstop=2
set textwidth=78
set backspace=indent,eol,start
set numberwidth=2
set relativenumber
set incsearch 
set ruler
set showcmd
set viminfo='20,\"50
set helplang=en,de
set autoread
set timeout
set ttimeout
set ttimeoutlen=100
set wildmenu
g:wildoptions = "pum"
g:mapleader = " "
g:maplocalleader = ","
g:NERDCreateDefaultMappings = 0
g:lsp_format_sync_timeout = 1000
g:lsp_preview_doubletap = 0
g:lsp_preview_autoclose = 1
g:lsp_diagnostics_enabled = 1
#g:lsp_experimental_workspace_folders = 1
#g:lsp_preview_keep_focus = 1
g:lsp_log_file = expand('~/.vim/vim-lsp.log')
#g:asyncomplete_log_file = expand('~/.vim/asyncomplete.log')

if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
g:plug#begin('~/.vim/vim-plug')

# https://github.com/preservim/nerdtree
Plug 'preservim/nerdtree'

# https://github.com/ryanoasis/vim-devicons
Plug 'ryanoasis/vim-devicons'

# https://github.com/tpope/vim-surround
# Plug 'tpope/vim-surround'

# https://github.com/tpope/vim-endwise
Plug 'tpope/vim-endwise'

# https://github.com/junegunn/fzf.vim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

# https://github.com/prabirshrestha/vim-lsp
Plug 'prabirshrestha/vim-lsp'

# https://github.com/prabirshrestha/asyncomplete.vim
Plug 'prabirshrestha/asyncomplete.vim'

# https://github.com/prabirshrestha/asyncomplete-lsp.vim
Plug 'prabirshrestha/asyncomplete-lsp.vim'

# https://github.com/preservim/nerdcommenter
Plug 'preservim/nerdcommenter'

# https://github.com/itchyny/lightline.vim
# Plug 'itchyny/lightline.vim'

# https://github.com/vim-airline/vim-airline
Plug 'vim-airline/vim-airline'

# https://github.com/vim-airline/vim-airline-themes#vim-airline-themes--
Plug 'vim-airline/vim-airline-themes'

# https://github.com/morhetz/gruvbox?tab=readme-ov-file
# Plug 'morhetz/gruvbox'

# https://github.com/joshdick/onedark.vim
Plug 'joshdick/onedark.vim'

# https://github.com/mbbill/undotree
# Plug 'mbbill/undotree'

# https://github.com/tpope/vim-fugitive
# Plug 'tpope/vim-fugitive'

# https://github.com/preservim/tagbar?tab=readme-ov-file
# Plug 'preservim/tagbar'

# https://github.com/preservim/vim-markdown
# Plug 'godlygeek/tabular'
# Plug 'preservim/vim-markdown'

# https://github.com/rhysd/vim-healthcheck
Plug 'rhysd/vim-healthcheck'

g:plug#end()

# autocmd vimenter * ++nested colorscheme gruvbox
# colorscheme onedark

nnoremap <Leader>b <Cmd>Buffers<CR>
nnoremap <Leader>c <Cmd>edit $MYVIMRC<CR>
nnoremap <Leader>e <Cmd>NERDTreeToggle<CR>
nnoremap <Leader>f <Cmd>Files<CR>
nnoremap <Leader>r <Cmd>source $MYVIMRC<CR>
nnoremap <Leader>s <Cmd>Rg<CR>
noremap \ :term ++kill="kill"<CR>
tnoremap \ <CR><C-D>

# these dictionaries can also have the keys:
# 'root_uri', 'capabilities', 'initialization_options'
# you can see this by reading '~/.vim/autoload/lsp.vim#s:ensure_init'
var c_lspinfo = {
	'name': 'clangd',
	'cmd': ['clangd', '--background-index'],
	'allowlist': ['c'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var lua_lspinfo = {
	'name': 'lua-language-server',
	'cmd': ['lua-language-server', '--stdio'],
	'allowlist': ['lua'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var python_lspinfo = {
	'name': 'pylsp',
	'cmd': ['pylsp'],
	'allowlist': ['python'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var rust_lsp_info = {
	'name': 'rust-analyzer',
	'cmd': ['rust-analyzer', '--log-file', './rust.log'],
	'allowlist': ['rust'],
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}
var vim_lsp_info = {
	'name': 'vim-language-server',
	'cmd': ['vim-language-server', '--stdio'],
	'allowlist': ['vim'],
	'initialization_options': {
		'vimruntime': $VIMRUNTIME,
		'runtimepath': &rtp
	},
	'blocklist': [],
	'config': {},
	'workspace_config': {}
}

var arduino_lsp_info = {
	'name': 'arduino-language-server',
	'cmd': ['arduino-language-server'],
	'allowlist': ['arduino', 'ino'],
	'blocklist': [],
	'workspace_config': {}
}

if executable('clangd')
	au User lsp_setup lsp#register_server(c_lspinfo)
endif
if executable('lua-language-server')
	au User lsp_setup lsp#register_server(lua_lspinfo)
endif
if executable('pylsp')
	au User lsp_setup lsp#register_server(python_lspinfo)
endif
if executable('rust-analyzer')
	au User lsp_setup lsp#register_server(rust_lsp_info)
endif
if executable('vim-language-server')
	au User lsp_setup lsp#register_server(vim_lsp_info)
endif
if executable('arduino-language-server')
	au User lsp_setup lsp#register_server(arduino_lsp_info)
endif

def On_lsp_buffer_enabled(): void
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

	# peek- infixable
  nnoremap <buffer> <leader>a <plug>(lsp-declaration)
	nnoremap <buffer> <leader>d <plug>(lsp-definition)
  nnoremap <buffer> <leader>g <plug>(lsp-implementation)
	nnoremap <buffer> <leader>t <plug>(lsp-type-definition)
  nnoremap <buffer> <leader>h <plug>(lsp-type-hierarchy)

	# -preview appendable 
  nnoremap <buffer> <leader>k <plug>(lsp-hover)

	# nothing
  nnoremap <buffer> <leader>m <plug>(lsp-document-symbol)
  nnoremap <buffer> <leader>i <plug>(lsp-document-diagnostics)
  nnoremap <buffer> <leader>w <plug>(lsp-preview-focus)
  nnoremap <buffer> <leader>l <plug>(lsp-preview-close)
  nnoremap <buffer> <leader>j <plug>(lsp-rename)
	
	# retired
  # nnoremap <buffer> <leader>z <plug>(lsp-code-action)
  # nnoremap <buffer> <leader>y <plug>(lsp-references)
  # nnoremap <buffer> <leader>x <plug>(lsp-code-lens)
  # nnoremap <buffer> <leader>w <plug>(lsp-next-diagnostic)
  # nnoremap <buffer> <leader>v <plug>(lsp-next-error)
  # nnoremap <buffer> <leader>u <plug>(lsp-next-warning)
  # nnoremap <buffer> <leader>n <plug>(lsp-status)

	autocmd! BufWritePre *.rs execute('LspDocumentFormatSync')
enddef

augroup lsp_install
	au!
	autocmd User lsp_buffer_enabled call On_lsp_buffer_enabled()
augroup END
#
# vim: set ft=vim :
