" INTERNAL STUFF
source $VIMRUNTIME/defaults.vim
" version 6.0 " this is now ignored
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
let &cpo=s:cpo_save
unlet s:cpo_save


" VARIABLES
" run 'mkdir -p ~/.cache/vim/{backup,swap,undo}'
set background=dark
set backspace=indent,eol,start
set backupdir=~/vimfiles/backup
set directory=~/vimfiles/swap
set display=truncate
set encoding=UTF-8
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en,de
set history=200
set hlsearch
set incsearch " while typing a search command, show where the pattern matches
set langnoremap
set nolangremap
set nowrap " text does not wrap to fit entirely in the window
set nrformats=bin,hex
set relativenumber " line numbering relative to the current line
set ruler " show line and column numbers at the bottom right of the window
set scrolloff=5
set shiftwidth=2 " i_ctrl^T and i_ctrl^D will enter 2 spaces
set showcmd " show partial commands at the bottom right of the window
set suffixes=.bak,~,.o,.info,.swp,.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc
set tabstop=2 " tabs become 2 spaces
set textwidth=78
set ttimeout
set timeoutlen=200
set ttimeoutlen=200 " time waited for a key code or mapped key sequence to complete (ms)
set undodir=~/vimfiles/undo
set viminfo='20,\"50
set wildmenu


" APPEARANCE
colorscheme evening


""" VIM PLUGINS
runtime ftplugin/man.vim
let g:ft_man_no_sect_fallback = 1
set keywordprg=:Man " program to be evoked by K


""" VIM PLUG (https://github.com/junegunn/vim-plug)
" to install vim-plug:
" 'curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

" call plug#begin('~/.vim/vim-plug')
" filesystem explorer
" Plug 'preservim/nerdtree'

" icons for nerdtree and other plugins
" Plug 'ryanoasis/vim-devicons'

" write ', ", <> simultaneosly at the beginning and at the end of a sentence, word, line
" Plug 'tpope/vim-surround'

" better start menu
" Plug 'mhinz/vim-startify'

" fuzzy finder
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Plug 'junegunn/fzf.vim'

" lsp and autocompletion
" Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'prabirshrestha/asyncomplete-lsp.vim'
" Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'

" easy comments
" Plug 'preservim/nerdcommenter'
" Plug 'tpope/vim-commentary'

" call plug#end()


" FUNCTIONS
let g:myColors = ['evening', 'sorbet', 'desert']
function CycleColorScheme()
    let idx = index(g:myColors, g:colors_name)
    return (idx + 1 >= len(g:myColors) ? g:myColors[0] : g:myColors[idx + 1])
endfunc


""" MAPPINGS
let g:mapleader = " "
let g:maplocalleader = ","

" nerdtree
" nnoremap <Leader>e <Cmd>NERDTreeToggle<CR>

" fzf
" nnoremap <Leader>b <Cmd>Buffers<CR>
" nnoremap <Leader>f <Cmd>Files<CR>
" nnoremap <Leader>s <Cmd>Rg<CR>
" nnoremap <Leader>o <Cmd>Commits<CR>
" nnoremap <Leader>m <Cmd>Commands<CR>
" nnoremap <Leader>m <Cmd>Maps<CR>

" vim-lsp
" nnoremap <Leader>k <Cmd>LspHover<CR>

" mine
nnoremap <Leader>c <Cmd>edit $MYVIMRC<CR>
nnoremap <Leader>r <Cmd>source $MYVIMRC<CR>
nnoremap <Leader>z :exe ":colorscheme " .. CycleColorScheme()<CR>
noremap \ :term ++close ++kill="kill"<CR>
tnoremap \ <CR>exit<CR>
noremap <LocalLeader>k O<Esc>j
noremap <LocalLeader>j o<Esc>k
noremap <LocalLeader>l o<Esc>kO<Esc>j
noremap! <Up> <NOP>
noremap! <Down> <NOP>
noremap! <Left> <NOP>
noremap! <Right> <NOP>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" startify variables
let g:startify_bookmarks = [
	"\ {'vimrc': '~/.vimrc'},
	\ '~/.vim/vimrc',
	\ '~/dotfiles/fish/config.fish',
	\ '~/dotfiles/kitty/kitty.fish',
	\ '~/notes/unix/arch-install-notes.md',
	\ '~/dwl/config.h',
	\ ]

let g:startify_commands = [
	"\ {'h startify': 'help startify'},
	\ ':help',
	\ ':help startify',
	\ ":help 'runtimepath'",
	\ ":help 'path'",
	\ ":help .vimrc",
	\ ]

" Cool plugin commands available
" asyncomplete/asyncomplete-lsp
" :LspCodeAction 
" :LspCodeLens
" :LspDocumentDiagnostics
" :LspDeclaration
" :LspDefinition
" :LspDocumentFormat
" :LspDocumentRangeFormat
" :LspDocumentSymbol
" :LspDocumentSymbolSearch
" :LspHover
" :LspNextDiagnostic
" :LspNexterror
" :LspPeekDeclaration
" :LspPeekDefinition
" :LspPeekImplementation
" :LspTypeDefinition
" :LspRename
" :LspStatus
" :LspInstallServers
" :LspManageServers
"
" Vim
" :DiffOrig - run diff with current file and something else
"
" Unknown
" :LP <something> - search for <something> in current file
"
" FZF
" :Ag
" :BCommits - git diff of all commits found in all buffers
" :BLines - opens floating window to search for words in all buffers
" :Buffers - opens floating window to search for words in all buffers
" :Colors - pick a color
" 	default, desert, elflord, evening, habamax, industry, koehler, lunaperche,
" 	pablo, slate, sorbet, torte, wildcharm, zaibatsu
" :Commands - show all commands
" :Commits - looks just like BCommits, but not only for buffers
" :Changes - see all changes made during this session
" :FZF - call fuzzy finder
" :Files - call fuzzy finder with file preview
" :Filetypes - pick a filetype for the current buffer
" :HelpTags - search for something within vim help files
" :History - open file history 
" :Jumps - open jump list
" :Lines - opens floating window to search for words in all files
" :Maps - all mappings done
" :Rg
" :Snippets - open all saved snippets
" :Windows - windows preview
"
" VimPlug
" :PlugStatus - check  all vimplug plugins
" :PlugUpgrade - upgrade vimplug
" :PlugUpdate - update vimplug
" :PlugInstall - install all plugins inside vimplug folder
"
" Startify
" :Startify - open startify

" vim: set ft=vim :
