vim9script
syntax on
set background=dark
colorscheme wildcharm
set nowrap
set shiftwidth=2
set tabstop=2
set relativenumber
set viminfo='20,\"50
set timeout
set ttimeout
set ttimeoutlen=100
set wildmenu
g:wildoptions = "pum"

call plug#begin('~/.vim/vim-plug')
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()

if executable('clang')
	au User lsp_setup lsp#register_server({
				\ 'name': 'clang',
				\ 'cmd': ['clangd', '--background-index'],
				\ 'allowlist': ['c'],
				\ 'blocklist': [],
				\ 'config': {},
				\ 'workspace_config': {} })
endif

if executable('lua-language-server')
	au User lsp_setup lsp#register_server({
				\ 'name': 'lua-language-server',
				\ 'cmd': ['lua-language-server', '--stdio'],
				\ 'allowlist': ['lua'],
				\ 'blocklist': [],
				\ 'config': {},
				\ 'workspace_config': {} })
endif

if executable('pyright')
	au User lsp_setup lsp#register_server({
			\ 'name': 'pyright',
			\ 'cmd': ['pyright'],
			\ 'allowlist': ['python'],
			\ 'blocklist': [],
			\ 'config': {},
			\ 'workspace_config': {} })
endif

if executable('rust-analyzer')
	au User lsp_setup lsp#register_server({
			\ 'name': 'rust-analyzer',
			\ 'cmd': ['rust-analyzer', '--log-file', './rust.log'],
			\ 'allowlist': ['rust'],
			\ 'blocklist': [],
			\ 'config': {}})
endif

def! On_lsp_buffer_enabled()
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=yes
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	nmap <buffer> gs <plug>(lsp-document-symbol-search)
	nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> gi <plug>(lsp-implementation)
	nmap <buffer> gt <plug>(lsp-type-definition)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> [g <plug>(lsp-previous-diagnostic)
	nmap <buffer> ]g <plug>(lsp-next-diagnostic)
	nmap <buffer> K <plug>(lsp-hover)
	nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
	nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
	g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs execute('LspDocumentFormatSync')
enddef

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled On_lsp_buffer_enabled()
augroup END
